/*
 * Copyright 2022 DeNA Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package packetproxy.quic.value.packet;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.nio.ByteBuffer;
import org.apache.commons.codec.binary.Hex;
import org.junit.jupiter.api.Test;
import packetproxy.quic.utils.Constants.Role;
import packetproxy.quic.value.PacketNumber;
import packetproxy.quic.value.key.level.InitialKey;
import packetproxy.quic.value.packet.longheader.LongHeaderPacket;
import packetproxy.quic.value.packet.longheader.pnspace.InitialPacket;

class InitialPacketTest {

	@Test
	void rfc9001のサンプルをparseできること() throws Exception {
		// https://www.rfc-editor.org/rfc/rfc9001.html#name-client-initial
		// https://www.rfc-editor.org/rfc/rfc9001.html#name-server-initial
		byte[] clientReq = Hex.decodeHex(
				"c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934"
						.toCharArray());
		byte[] serverRes = Hex.decodeHex(
				"cf000000010008f067a5502a4262b5004075c0d95a482cd0991cd25b0aac406a5816b6394100f37a1c69797554780bb38cc5a99f5ede4cf73c3ec2493a1839b3dbcba3f6ea46c5b7684df3548e7ddeb9c3bf9c73cc3f3bded74b562bfb19fb84022f8ef4cdd93795d77d06edbb7aaf2f58891850abbdca3d20398c276456cbc42158407dd074ee"
						.toCharArray());

		ByteBuffer clientReqBuffer = ByteBuffer.wrap(clientReq);
		InitialKey clientInitialKey = InitialKey.of(Role.CLIENT, LongHeaderPacket.getDestConnId(clientReqBuffer));
		InitialKey serverInitialKey = InitialKey.of(Role.SERVER, LongHeaderPacket.getDestConnId(clientReqBuffer));

		InitialPacket ipCli = new InitialPacket(ByteBuffer.wrap(clientReq), clientInitialKey, PacketNumber.Infinite);
		System.out.println(ipCli);
		InitialPacket ipServ = new InitialPacket(ByteBuffer.wrap(serverRes), serverInitialKey, PacketNumber.Infinite);

		assertTrue(ipCli.getPayload().length > 0);
		assertTrue(ipServ.getPayload().length > 0);
	}

	@Test
	void 自分のサンプルをparseできること() throws Exception {
		byte[] clientReq = Hex.decodeHex(
				"c200000001086a286db0a597681a08c9cda268b4f00fdc0044b69bebcebc42cd8ce39db8a5c8f5cce833444b125120132f8c500c669ecf3b3eeb896af234b985ca641af4c3bd0de24268ec705d638f318cc5974977e46a0d3ca3c22ca3d6c8f11d3aa065ecd7508d889a2fc8e87a82703c122ddb1e21210d0edbfa9c5436c772ec0d889e124bbb2e7c6e48f662578510867b3b7167bfbcc3559ea0a3956042183a8e19c47e5f0d77f8381e9dc7e885dfc8348613252b0b3e00ca2d8c654b1257a33560ced63be19bc6add1b2a3302d6ec8d1b05ac557000a8e7ec40c7fa0728bae04e5531c7521521037861f6a2520c28186ec2a2b6e63ec59c26ef971bf175e1648c22a31a6d4642cea8df02ed63ed84ff4898887e7c6bdb0d741249dd7c53fde19cdd3fbc1447d372755cabed74543175b6f5e6ddd33d1751c0a6ac0393b609a0f83c8698ec50377d5f99461107bde0550cd9bd67bc210858f4e0359b1448042e5c38e79412a800f169b00188fb0dd670d589506c8fc4c4df399a6335cba1339a82f31bc9c47e2aab8bd3821b629405307e11b8c7236b667c6bfc9e5272fa0a76ac4e8b03b605e6d3517fe4aa6657ca14015067b0e64ccc4a1c828a69eff388cb98ff449cafd227ce6b0c64a8556c5c60b8995f15fb21df4f24b4353d2b649dcc7abe0945b089ffcffe0a50529cc41d282c69bc3a29f0741329ac246af2b92ba14263be08f9ece37eb11f1867fcaea40fbaf7459c70d394fdd6abb62f50bbc071fb0adc93017e1524f721cc0e7450e3b21fa59e683da6f724b800a9daf4e3e36e1c04d552cafd2c3b61f76caf12e05fe63e50b6b4590fdeaffe4690286faf1be39a72fd339f9ca46f38349b9dea26bde9d43132f3a8e51ee9da22fc3b1ac099da7847d0ec6ca61849db5c0d16a42da8a1b1d494a5f532c81fcc19215e695b75f50c038c3ccd14ccf72a7d1ead29b8e72f0754a60b3f34322e7fae942306aae73e7be0ca89a7d43ce55cc6b7bc0b844db448cf08e970c49e406240d5fd73ec851fb488acf1e21a578ea318383896ae754ee05ae62a6868db80f5622d495d433412d04cce249c2efbef2bab7d92544797d21938ca55c62a536f11d82260634ebb981580224f1f09c6037af8a94cc53b327afd7a236d2392f17da3a7c7a91b422d604e760f364c2429da2a660736cd95bd025129745beb69987df9e79ef88d22ace6e25d501461417b52700fb14d3aaee2fc183363ebf902b1916a39973f610cd4fff30907a7730f936cfb33e83bc7dca609ba55aeda2c94e5db4c38776bdb48dbfd76c8435d324a0779d0e1177e4e38a79325ce1f177e4ec0c9876bc3dc86d58d8e2eec567a86b819cbb3147651755ee7c1497cbd794927a9771a880a8665bb1f22d4d5e0be269bc196bb285dd7f80a7f05850c8de77814920df0bd9d8133fb569b6158f4db5cf7b1b7921554e3f6f7cc2c0581500ce168da41dea20ca09c5c8367391d09e138176ca4b326aaf3fb4c9cf8cc5a7258eb6927d5b2e8c54b6834e2542831fc5c509fd5f37192fb70ab3d6e6a22c8b0ee99f9cdf3d744774329bf371d8124d4a6e9b376e073df553ccd7e489a03454f565759e2576a9b5bbaf16c74d5c4e99cdc5089b02621692db7176ff9adcc6f28d19d5a97e87d5e198a12c5af15b0fe6fb01f23de0fcf24583813dd0834f0e08f922ac475c00974b19c97e178d4abe43e9599f8ef17ca0ae9bcb3e97"
						.toCharArray());
		byte[] serverRes = Hex.decodeHex(
				"c50000000108c9cda268b4f00fdc09e8881de84c0e4c46d800409670b031b78ac65b9e0c6e56c108dda99a71096cb967b040f3653ce49ffe97d599d4cb9b09504e37bf4a4d8800e3038eb1ccc25497186aad4ae9834b90c93277f9034ee8999a3fb67f248ae106edd8f0ed554c44aa03190114f9b7abb4dbf118b9a3419b2c9cd3f3d299e62131a9924eebf438908ab5e2adec39b3f8bd668b6afdbc3572b026a38aae833ab8cac8d2359b78f379f24ba4e60000000108c9cda268b4f00fdc09e8881de84c0e4c46d84435ff2013623222e045ed0e9a4ac751d9f519c189649d1abad5d43f252c649006425543e3acb285c89c2e58439ba3848c6168c6bdb1ebe63122f491846e656e2563be617a0be79dadb2e816ec1b94265c2ad51e0604f1553b76a0397c10120d192f800c8880c0650b94b0eb40abc81415d22494ced4680e732238423777377e99d592d6437a4d5e3e399aa0d1b2355f28de24c808d7a1f2352d8a86809fcb9296e868f016d7c1d02ac0ef41717fac1addf94da5ccbd61bd05d375bda283a3edfc056c4475fbf0174611faa45efc0d276837070d592bc146868b390fdf938f81882a423c8c3955fa7f00ccb34320991eaceda3ef8f5b8ccf175f19bb23f1cb8d9688e5d3fd0186bbf5c7ec5586dd4d9f84038649ac758a4cf5a1ef41dae9dc18a4a382190d65f45e013a2f3b82f2f82e7945fc4718cbfdad0186b15ac1b3eece41ca55b850626742d40c8240652afbee10f90e7b4d19be18c9af929223998bb4e385bbc0e4f4f4e797c32c014267ac53e1958b60422c7a65fbdb6480fe56dc45ba1b2a6b041c7fe53d96af15dcfb2e404f479cf5a8f55f636569c41534152bdd38b2f1f0f81da73c37fe3e6325a6f86b972318f86d9ac4571f9544ea0a70f7d81b27e5a10a6bbce70c91b2d291a843417d4437f0c9fc67b4af5e8945a8a4fae6be3497a02ad4b7660d429289c0da116723adc63f6d31c5c4184fca4d049f98c005e695bda6824f0ea964d4c39b2dacb66d3eca3fad8c5180539f7110f19f406f1201e432c9cf4d9be239573a41a27506ae633ed4bf5911a0b2ef202e3b465ed196a2da9322ce7a7a434604c26a2b2b2db42ec7a138f1a35941ee40cae800afb37bf3c89fe210849d0f848e2dcd801e355df908bc6f3c28c788c4ff77095be034e03b6f970354d914586db5987b176088938619d38f088b39bdbe38e28ee6e6a1778be5ca1022456080642bad343b5b8655077b7ae8040a8ed6e7afeab8123b9a8100ad2eb46432563047b7583372157ec4825315c3d62ee1262eb5eae3540acd1adb42d8fa5b1e21ab121cb2ed549beaa768ed957b7432d95ffde82ab6e5a2b8efaefc8cb3ef9b98dd588d02a009c9c77cc0c0e82220b38df7b160949c70d0115e93e6574fe5085ac810a9ebcbdda0fc3df6011c9f94b82f2a206534950114315c6be8d8ac092d82593ecce7b572aa4f355b2693ba529988780eaf5c550222b2af51214cf41910b88d7303cd2aa9c52c34c98eafa0583872990a53e5e2f4c6e03814bace7230ea54ebf663b210e341de59bda7b3be04e66c9f90b0fa66761dcbafb188e71edb498b13196139ccdc710a5cc0e08a91c4eefd781b11d4d2be5e98255ae4a90d5820ecfc99ec641d8290509012ab0c38feec7cde28cad2c59e052a600fff5e3a024220482b282bccd705387593899ee85861649becef7da0ba8e97f9c864aff5b15aa7a1cc3a673a7caa1984877f8c2e69b0bf0ab9ff9a558298f14bf82fadb82a4b24d378f69c8e4e2a4eca67ed23421357eb0000000108c9cda268b4f00fdc09e8881de84c0e4c46d844e66f9559e15f2e70e41192f648960b4ea1594857e036fd7464060ea3b4e50e3bd9502e84a2915653e278da821b5479876abe6d8b40b8583a13adc2c917aff0e7706759e5b7dcd95a939c00ef6bf1717a36083fccccc694a09b5efb8f60198e2d17557bb3c642672acbd102e9b1b3b0a090a018816a9dfa17565d5857514bbd37bb4e9eb1aed951d16ca2632fcdabefea8bac815e0845b4f6c85a44263be70aae7854de99b8b6f661680d05eb9214b7425d1263288089c36394c835b6ecf238b801927bc753b8f1adb60f1136b3cbc9bb57308e7c3359074d512cd1816bfc455d1fc91512c7e7f7b6c73e59dfe1b3dc19edb625e838fdd591a30c86b751c82ce95e7691b1df421fcb1505233d041504e64c842f8c46840a14df0a3ac8be09db4418e9462c6b705ed87135b3b1353e3853a7561ae22a4a34a7f8fc03a2f286067daac9af9e88340c52803b397d5d3d37e433ed1dd40eeaaea094fd90f1b4212d0b92fbd8b741e5503d6564b0ec3610d6425b016c7657d1012b94432fb65ee169a6799025c120e807d2618cba527728400713dd3ac8553b33e84dac126423cbae1c5e997a329a5576bf07ea240878b21d2d89b41a0b7db0771e6f0c8ff49ee3d28fae5d7cf681f4f7c61eb3abebab42f841d39604996e25b2f93ff1383da51529397e3d835df01174058900b428ee748cd11483bbe2e99b29cf505c41956f73f50cacfde39d00db409c3447727bfef9cef784ccaeebb9d1770b9cebd781f91e372087e2f13349c5c5a36d22c8cffc3f244bf061436543ff191453269207b99d0b95f755511ff61406313fdc588dfcb599cd360c508ae83805f486c1483c74d357d3e11e6eb4f2a67a485bebafe590f8b3bf9bac4e8de11058e94328935d7e52bf3e4ff8084bf324491845dad8bf9ff508badd7d53294e1320f75258b10da4e8552f49ac98aaf671988a021b025f217b7efa22ed0b38a838c8530201db8ffa751d9c419e5235748a5d47a1314d902e67419a610a0777386b13f28ce3880fbe94c3f1ded8458a93c54a"
						.toCharArray());

		ByteBuffer clientReqBuffer = ByteBuffer.wrap(clientReq);
		InitialKey clientInitialKey = InitialKey.of(Role.CLIENT, LongHeaderPacket.getDestConnId(clientReqBuffer));
		InitialKey serverInitialKey = InitialKey.of(Role.SERVER, LongHeaderPacket.getDestConnId(clientReqBuffer));

		InitialPacket ipCli = new InitialPacket(ByteBuffer.wrap(clientReq), clientInitialKey, PacketNumber.Infinite);
		InitialPacket ipServ = new InitialPacket(ByteBuffer.wrap(serverRes), serverInitialKey, PacketNumber.Infinite);

		System.out.println(ipCli);
		System.out.println(ipServ);

		assertTrue(ipCli.getPayload().length > 0);
		assertTrue(ipServ.getPayload().length > 0);
	}

	@Test
	void 自分のサンプルをparseできること2() throws Exception {
		byte[] clientReq = Hex.decodeHex(
				"c100000001081befef1be1a7df1908cbfff1469abaf57d2fd8013f2dc145e5be5073c2cb448fad4afec36a9baac0a2801344f4907f83d5312c9f4bc10a2994d959c93bfc24cb8f4209168cda7c355f9411e1ecfa1a28d705a52d6a4089b4336a0cf2d574442956a476c0246d83dbf5b26810057134c69953b362197fcd79bf5b4e4687e4845bb50a852b68b97c8e52bb317b4f3e2ccdd3a0a61a9bdb7f2f474b6e380af33965a49ae3d1f7189320481506b39ab118ef59da6f51d95f1822284a239c717cff88ca8875f6ebb7293968eae392bfc10edb7768f229cf8eaa16b89edd10774d53623b4600249409d918cc4d580c8a71acbca1ebf2f4d2c2f5202f1382e35d19476a17c563d3e00fbfc1e94696224d76acfc3a514a9156a0030a8e0058af2e209784692f919db1032845b73ff068ce0f8ff6643e9630123fa0a9481d12ec2cf99c56c32ddd8aa44c59802bba442f693dfcbbcbabff3912ec7ee6827685e04db63a674f3fbe160cf625e9ddd432a285a1f533e5285978974ba0578fa2fdc5331feaa1b6ffb21fb57fa9b87ad8311e6c903620f7d4d157a9fdafd8f460309be817cb36a594a5992296a37a7e13b5a292644ddc64dd9884db89961e9d2b733b6de0ac4529fd4d513259ab4480e64fe7850bdd28864438c4b62650bb34c6df4b918b56a524541332856dc6d679df9a0bdb35eb211a82b8b40e77d0a6656d44121dc2ec8cae91bd633ce35c93759e92db89da1ec14dba5b24d3b34d6eef28354f1ccaf3313a8d82457bc99ea840b65dbeea0616463062cdd1931a0c21ef978f12ec87f5ad0ccedc0f11e507516fa35b53d500000001081befef1be1a7df1908cbfff1469abaf57d4279a671beccd6fdeb33f4fc0e094c3897e322549ab79f7c112c8e829f66abf424a7ebef5775bfcd26b65108e1d0e87eeb564bf0bf80ed0444ce6a3cb81a2c0735ddb5db902f6c9b3d27eb10b7c4fd6bb3cc1b5bbba9f26e154a5c6787aedf93b75b1b89ac436875dca3d935bec76d12ab17e684fe631d55d118ec4f9f21f34aa267593079ab0fe5609596e840af8a90cc6af6b3706838408669432ea150d76f149e490ecfe8deb17301cbe7563048e4f09d72f8a0937229a29128ad51bac7f806e0a7f149c189ad44326128daba5fcdc3ad2c9304d2656bc541642501077937a2cd7245eb7252428af94c5102efe2ebb2143b777d8042f1b8c3ff4e002bcc0f30f4ba898ef9f503a963a0096620dc12713fa3b0ba0ef791db14bf8b1c5912a6ca7a42c511036c932186cef3009ba9006eba6588d003bf2ae5feac7055832e247704cf96ed631e8cfa2cc1b17c76e40709bacb9f554140ab2e966974eb4fa83c87b50b9e7708cc47d42fcb41a44adcacc3e36ea163c05cec39478f97cd4a4dd867a8fcf3e389c095fe681250d863bb5c3596a60b61e6661233a7dd5d05b85a4f106b6c87dac91d6cff739917d097c0256d4ee1acc6ee3bd3f071c325f92f2efe0f9798ed03029b5fffe6f26bc0ea9b443e147f8b6a9cb79c5ef1f5f0d4c4c15ee425c8fa74668f529db6e28cf50ddd549e745462d422c56e24bfc40ce368b693b137735d0a331bfbeb94fc1390417d6e406cc23ae40c1a34aa6872e6e5b249cf295674b63e0b598dd4b06ae2483229a158bc20e35f859c8c5a292e5bed379d05b296027976345ded4e1081cc8b29c1942be947e1eacbb16c414d65b4f76fd43b1257ba72533ea491b4f87a708ef4be49714655fb468a4fc247aee8"
						.toCharArray());

		ByteBuffer clientReqBuffer = ByteBuffer.wrap(clientReq);
		InitialKey clientInitialKey = InitialKey.of(Role.CLIENT, LongHeaderPacket.getDestConnId(clientReqBuffer));

		InitialPacket ipCli = new InitialPacket(ByteBuffer.wrap(clientReq), clientInitialKey, PacketNumber.Infinite);
		System.out.println(ipCli);
		assertTrue(ipCli.getPayload().length > 0);
	}

	@Test
	void rfc9001のサンプルをparse後getBytesできること() throws Exception {
		// https://www.rfc-editor.org/rfc/rfc9001.html#name-client-initial
		byte[] clientReq = Hex.decodeHex(
				"c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934"
						.toCharArray());
		byte[] serverRes = Hex.decodeHex(
				"cf000000010008f067a5502a4262b5004075c0d95a482cd0991cd25b0aac406a5816b6394100f37a1c69797554780bb38cc5a99f5ede4cf73c3ec2493a1839b3dbcba3f6ea46c5b7684df3548e7ddeb9c3bf9c73cc3f3bded74b562bfb19fb84022f8ef4cdd93795d77d06edbb7aaf2f58891850abbdca3d20398c276456cbc42158407dd074ee"
						.toCharArray());

		ByteBuffer clientReqBuffer = ByteBuffer.wrap(clientReq);
		InitialKey clientInitialKey = InitialKey.of(Role.CLIENT, LongHeaderPacket.getDestConnId(clientReqBuffer));
		InitialKey serverInitialKey = InitialKey.of(Role.SERVER, LongHeaderPacket.getDestConnId(clientReqBuffer));

		InitialPacket ipCli = new InitialPacket(ByteBuffer.wrap(clientReq), clientInitialKey, PacketNumber.Infinite);
		InitialPacket ipServ = new InitialPacket(ByteBuffer.wrap(serverRes), serverInitialKey, PacketNumber.Infinite);

		byte[] ipCliBytes = ipCli.getBytes(clientInitialKey, PacketNumber.Infinite);
		byte[] ipServBytes = ipServ.getBytes(serverInitialKey, PacketNumber.Infinite);
		assertTrue(ipCliBytes.length > 0);
		assertTrue(serverRes.length > 0);
	}

	@Test
	void equalsが正常に動作すること() throws Exception {
		// https://www.rfc-editor.org/rfc/rfc9001.html#name-client-initial
		byte[] clientReq = Hex.decodeHex(
				"c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934"
						.toCharArray());

		ByteBuffer clientReqBuffer = ByteBuffer.wrap(clientReq);
		InitialKey clientInitialKey = InitialKey.of(Role.CLIENT, LongHeaderPacket.getDestConnId(clientReqBuffer));

		InitialPacket ipCli1 = new InitialPacket(ByteBuffer.wrap(clientReq), clientInitialKey, PacketNumber.Infinite);
		InitialPacket ipCli2 = new InitialPacket(ByteBuffer.wrap(clientReq), clientInitialKey, PacketNumber.Infinite);

		assertThat(ipCli1).isEqualTo(ipCli2);
	}

	@Test
	void equalsが正常に動作すること2() throws Exception {
		byte[] req1 = Hex.decodeHex(
				"c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934"
						.toCharArray());
		byte[] req2 = Hex.decodeHex(
				"c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934"
						.toCharArray());

		ByteBuffer clientReqBuffer = ByteBuffer.wrap(req1);
		InitialKey clientInitialKey = InitialKey.of(Role.CLIENT, LongHeaderPacket.getDestConnId(clientReqBuffer));

		InitialPacket ipCli1 = new InitialPacket(ByteBuffer.wrap(req1), clientInitialKey, PacketNumber.Infinite);
		InitialPacket ipCli2 = new InitialPacket(ByteBuffer.wrap(req2), clientInitialKey, PacketNumber.Infinite);
		assertThat(ipCli1).isEqualTo(ipCli2);
	}

	@Test
	void parseとgetBytesを複数回繰り返せること() throws Exception {
		byte[] req1 = Hex.decodeHex(
				"c000000001088394c8f03e5157080000449e7b9aec34d1b1c98dd7689fb8ec11d242b123dc9bd8bab936b47d92ec356c0bab7df5976d27cd449f63300099f3991c260ec4c60d17b31f8429157bb35a1282a643a8d2262cad67500cadb8e7378c8eb7539ec4d4905fed1bee1fc8aafba17c750e2c7ace01e6005f80fcb7df621230c83711b39343fa028cea7f7fb5ff89eac2308249a02252155e2347b63d58c5457afd84d05dfffdb20392844ae812154682e9cf012f9021a6f0be17ddd0c2084dce25ff9b06cde535d0f920a2db1bf362c23e596d11a4f5a6cf3948838a3aec4e15daf8500a6ef69ec4e3feb6b1d98e610ac8b7ec3faf6ad760b7bad1db4ba3485e8a94dc250ae3fdb41ed15fb6a8e5eba0fc3dd60bc8e30c5c4287e53805db059ae0648db2f64264ed5e39be2e20d82df566da8dd5998ccabdae053060ae6c7b4378e846d29f37ed7b4ea9ec5d82e7961b7f25a9323851f681d582363aa5f89937f5a67258bf63ad6f1a0b1d96dbd4faddfcefc5266ba6611722395c906556be52afe3f565636ad1b17d508b73d8743eeb524be22b3dcbc2c7468d54119c7468449a13d8e3b95811a198f3491de3e7fe942b330407abf82a4ed7c1b311663ac69890f4157015853d91e923037c227a33cdd5ec281ca3f79c44546b9d90ca00f064c99e3dd97911d39fe9c5d0b23a229a234cb36186c4819e8b9c5927726632291d6a418211cc2962e20fe47feb3edf330f2c603a9d48c0fcb5699dbfe5896425c5bac4aee82e57a85aaf4e2513e4f05796b07ba2ee47d80506f8d2c25e50fd14de71e6c418559302f939b0e1abd576f279c4b2e0feb85c1f28ff18f58891ffef132eef2fa09346aee33c28eb130ff28f5b766953334113211996d20011a198e3fc433f9f2541010ae17c1bf202580f6047472fb36857fe843b19f5984009ddc324044e847a4f4a0ab34f719595de37252d6235365e9b84392b061085349d73203a4a13e96f5432ec0fd4a1ee65accdd5e3904df54c1da510b0ff20dcc0c77fcb2c0e0eb605cb0504db87632cf3d8b4dae6e705769d1de354270123cb11450efc60ac47683d7b8d0f811365565fd98c4c8eb936bcab8d069fc33bd801b03adea2e1fbc5aa463d08ca19896d2bf59a071b851e6c239052172f296bfb5e72404790a2181014f3b94a4e97d117b438130368cc39dbb2d198065ae3986547926cd2162f40a29f0c3c8745c0f50fba3852e566d44575c29d39a03f0cda721984b6f440591f355e12d439ff150aab7613499dbd49adabc8676eef023b15b65bfc5ca06948109f23f350db82123535eb8a7433bdabcb909271a6ecbcb58b936a88cd4e8f2e6ff5800175f113253d8fa9ca8885c2f552e657dc603f252e1a8e308f76f0be79e2fb8f5d5fbbe2e30ecadd220723c8c0aea8078cdfcb3868263ff8f0940054da48781893a7e49ad5aff4af300cd804a6b6279ab3ff3afb64491c85194aab760d58a606654f9f4400e8b38591356fbf6425aca26dc85244259ff2b19c41b9f96f3ca9ec1dde434da7d2d392b905ddf3d1f9af93d1af5950bd493f5aa731b4056df31bd267b6b90a079831aaf579be0a39013137aac6d404f518cfd46840647e78bfe706ca4cf5e9c5453e9f7cfd2b8b4c8d169a44e55c88d4a9a7f9474241e221af44860018ab0856972e194cd934"
						.toCharArray());

		ByteBuffer clientReqBuffer = ByteBuffer.wrap(req1);
		InitialKey clientInitialKey = InitialKey.of(Role.CLIENT, LongHeaderPacket.getDestConnId(clientReqBuffer));

		InitialPacket ipCli1 = new InitialPacket(ByteBuffer.wrap(req1), clientInitialKey, PacketNumber.Infinite);
		byte[] req2 = ipCli1.getBytes(clientInitialKey, PacketNumber.Infinite);
		InitialPacket ipCli2 = new InitialPacket(ByteBuffer.wrap(req2), clientInitialKey, PacketNumber.Infinite);
		byte[] req3 = ipCli2.getBytes(clientInitialKey, PacketNumber.Infinite);
		InitialPacket ipCli3 = new InitialPacket(ByteBuffer.wrap(req3), clientInitialKey, PacketNumber.Infinite);
		byte[] req4 = ipCli3.getBytes(clientInitialKey, PacketNumber.Infinite);
		assertThat(ipCli2).isEqualTo(ipCli3);
	}

}
